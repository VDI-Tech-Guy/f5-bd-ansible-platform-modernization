# roles/deploy_f5_tenants_to_velos/tasks/deploy_pair.yml



- name: Load backup inventory JSON
  ansible.builtin.set_fact:
    create_f5_os_tenant_ha_inventory: >-
      {{ lookup('file', hostvars[source_host].backup_path + '/inventory_' + source_host + '.json') | from_json }}
  delegate_to: localhost

- name: DEBUG - Show source host and path
  ansible.builtin.debug:
    msg: "Source: {{ source_host }}, Path: {{ hostvars[source_host].backup_path + '/inventory_' + source_host + '.json' }}"

- name: Collect info from destination chassis
  f5networks.f5os.f5os_device_info:
    gather_subset:
      - tenant-images
      - vlans
  delegate_to: "{{ destination_host }}"
  register: create_f5_os_tenant_ha_tenant_info

- name: Create VLANs
  f5networks.f5os.f5os_vlan:
    name: "vl{{ item.tag }}"
    vlan_id: "{{ item.tag }}"
  loop: "{{ create_f5_os_tenant_ha_inventory.vlans }}"
  when: '"yes" in item.interfaces[0].tagged'
  delegate_to: "{{ destination_host }}"

- name: Build VLAN list
  ansible.builtin.set_fact:
    create_f5_os_tenant_ha_vlan_list: "{{ create_f5_os_tenant_ha_vlan_list | default([]) + [item.tag] }}"
  loop: "{{ create_f5_os_tenant_ha_inventory.vlans }}"
  when: '"yes" in item.interfaces[0].tagged'

- name: Pick matching tenant image
  ansible.builtin.set_fact:
    create_f5_os_tenant_ha_image: "{{ item }}"
  loop: "{{ create_f5_os_tenant_ha_tenant_info.tenant_images }}"
  when:
    - hostvars[source_host].build_number is defined
    - hostvars[source_host].build_number in item.name

- name: Deploy tenant to VELOS chassis
  f5networks.f5os.f5os_tenant:
    name: "{{ create_f5_os_tenant_ha_inventory.devices[0].hostname.split('.')[0] | lower }}"
    image_name: "{{ create_f5_os_tenant_ha_image.name }}"
    nodes: [1]
    mgmt_ip: "{{ hostvars[source_host].ansible_host }}"
    mgmt_prefix: "{{ mgmt_sn_cidr }}"
    mgmt_gateway: "{{ mgmt_gw }}"
    vlans: "{{ create_f5_os_tenant_ha_vlan_list }}"
    cpu_cores: "{{ cpu_cores }}"
    memory: "{{ memory | int }}"
    cryptos: enabled
    virtual_disk_size: "{{ disk_size | default(120) }}"
    running_state: configured
  delegate_to: "{{ destination_host }}"
  connection: httpapi
