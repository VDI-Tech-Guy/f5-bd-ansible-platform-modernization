- name: Set source host for this destination
  ansible.builtin.set_fact:
    source_host: "{{ create_f5_os_tenant_ha_pair_map[inventory_hostname] }}"

- name: DEBUG - Confirm pair
  ansible.builtin.debug:
    msg: "Deploying for destination={{ inventory_hostname }} with source={{ source_host }}"

- name: Set full path to backup JSON for source
  ansible.builtin.set_fact:
    create_f5_os_tenant_ha_inventory_path: "{{ hostvars[source_host].backup_path + '/inventory_' + source_host + '.json' }}"

- name: Load backup inventory JSON
  ansible.builtin.set_fact:
    create_f5_os_tenant_ha_inventory: "{{ lookup('file', create_f5_os_tenant_ha_inventory_path) | from_json }}"
  delegate_to: localhost

- name: DEBUG - Confirm backup path being read
  ansible.builtin.debug:
    msg: "Reading backup file: {{ create_f5_os_tenant_ha_inventory_path }}"

- name: Collect info from destination chassis
  f5networks.f5os.f5os_device_info:
    gather_subset:
      - tenant-images
      - vlans
  register: create_f5_os_tenant_ha_tenant_info

- name: Create VLANs
  f5networks.f5os.f5os_vlan:
    name: "vl{{ item.tag }}"
    vlan_id: "{{ item.tag }}"
  loop: "{{ create_f5_os_tenant_ha_inventory.vlans }}"
  when: '"yes" in item.interfaces[0].tagged'

- name: Build VLAN list
  ansible.builtin.set_fact:
    create_f5_os_tenant_ha_vlan_list: "{{ create_f5_os_tenant_ha_vlan_list | default([]) + [item.tag] }}"
  loop: "{{ create_f5_os_tenant_ha_inventory.vlans }}"
  when: '"yes" in item.interfaces[0].tagged'

- name: Pick matching tenant image
  ansible.builtin.set_fact:
    create_f5_os_tenant_ha_image: "{{ item }}"
  loop: "{{ create_f5_os_tenant_ha_tenant_info.tenant_images }}"
  when:
    - hostvars[source_host].build_number is defined
    - hostvars[source_host].build_number in item.name

- name: Group devices by rSeries
  ansible.builtin.set_fact:
    create_f5_os_tenant_ha_grouped_devices: >-
      {{
        create_f5_os_tenant_ha_inventory.devices
        | selectattr('rSeries', 'defined')  # Only include devices with rSeries defined
        | groupby('rSeries')
      }}
  delegate_to: localhost

- name: DEBUG - Show grouped devices
  ansible.builtin.debug:
    msg: "Grouped devices by rSeries: {{ create_f5_os_tenant_ha_grouped_devices }}"

- name: Determine the rSeries of the current host
  ansible.builtin.set_fact:
    current_rseries: "{{ hostvars[inventory_hostname].rSeries }}"
  when: hostvars[inventory_hostname].rSeries is defined

- name: DEBUG - Show current rSeries
  ansible.builtin.debug:
    msg: "Current rSeries for this host: {{ current_rseries }}"

- name: Select a device based on the current rSeries
  ansible.builtin.set_fact:
    selected_device: "{{ create_f5_os_tenant_ha_grouped_devices[current_rseries][0] }}"
  when: current_rseries is defined

- name: Deploy selected node to VELOS chassis
  f5networks.f5os.f5os_tenant:
    name: "{{ selected_device.hostname.split('.')[0] | lower }}"
    image_name: "{{ create_f5_os_tenant_ha_image.name }}"
    nodes: [1]  # Assuming you need to deploy this node as node 1
    mgmt_ip: "{{ selected_device.management_address }}"
    mgmt_prefix: "{{ mgmt_sn_cidr }}"
    mgmt_gateway: "{{ mgmt_gw }}"
    vlans: "{{ create_f5_os_tenant_ha_vlan_list }}"
    cpu_cores: "{{ cpu_cores }}"
    memory: "{{ memory | int }}"
    cryptos: enabled
    virtual_disk_size: "{{ disk_size | default(120) }}"
    running_state: configured
  delegate_to: localhost
  when: selected_device is defined
