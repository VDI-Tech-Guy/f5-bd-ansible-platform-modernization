---

- name: Pause for 5 Minutes
  ansible.builtin.pause:
    minutes: 5

- name: Initialize F5 failover status check result
  ansible.builtin.set_fact:
    f5_status_ok: false

- name: Wait up to 15 minutes for F5 to reach ACTIVE or STANDBY state
  vars:
    retry_delay: 30
    max_retries: 30
  until: f5_status_ok
  retries: "{{ max_retries }}"
  delay: "{{ retry_delay }}"
  delegate_to: localhost
  block:

    - name: Run failover-status command on F5
      f5networks.f5_bigip.bigip_command:
        commands: show cm failover-status
      register: f5_status_result
      failed_when: false
      delegate_to: "{{ inventory_hostname }}"
      vars:
        ansible_connection: httpapi

    - name: Evaluate F5 failover status
      ansible.builtin.set_fact:
        f5_status_ok: >-
          {{ ('ACTIVE' in f5_status_result.stdout[0] or 'STANDBY' in f5_status_result.stdout[0]) and
             ('green' in f5_status_result.stdout[0] or 'gray' in f5_status_result.stdout[0]) }}

    - name: Debug F5 failover output (optional)
      ansible.builtin.debug:
        msg: "{{ f5_status_result.stdout[0] }}"


# - name: Wait up to 15 minutes for F5 to reach ACTIVE or STANDBY state
#   vars:
#     retry_delay: 30
#     max_retries: 30
#   block:
#     - name: Check failover-status on F5 device
#       f5networks.f5_bigip.bigip_command:
#         commands: show cm failover-status
#       register: f5_status_result
#       failed_when: false
#       delegate_to: "{{ inventory_hostname }}"
#       vars:
#         ansible_connection: httpapi  # or 'network_cli' if you're using SSH-based
#       loop: "{{ range(0, max_retries) | list }}"
#       loop_control:
#         label: "Try #{{ item + 1 }}"
#       until:
#         - f5_status_result.stdout is defined
#         - f5_status_result.stdout | length > 0
#         - >
#           ('ACTIVE' in f5_status_result.stdout[0] or 'STANDBY' in f5_status_result.stdout[0])
#         - >
#           ('gray' in f5_status_result.stdout[0] or 'green' in f5_status_result.stdout[0])
#       delay: "{{ retry_delay }}"
#       retries: 1
